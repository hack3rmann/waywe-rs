use crate::object::WlObjectId;
use core::fmt;
use std::{
    ffi::{CStr, c_void},
    mem,
    ptr::NonNull,
    slice,
    sync::atomic::{
        AtomicUsize,
        Ordering::{Acquire, Release},
    },
};
use wayland_sys::{
    wl_proxy, wl_proxy_destroy, wl_proxy_get_class, wl_proxy_get_id, wl_proxy_get_user_data,
    wl_proxy_set_user_data,
};

/// Represents a proxy object created on the libwayland backend
pub struct WlProxy {
    raw: NonNull<wl_proxy>,
    interface_name_length: AtomicUsize,
}

impl WlProxy {
    /// # Safety
    ///
    /// - `raw` should be a valid object generated by libwayland
    /// - no one have any access to this object
    pub const unsafe fn from_raw(raw: NonNull<wl_proxy>) -> Self {
        Self {
            raw,
            interface_name_length: AtomicUsize::new(0),
        }
    }

    /// Raw proxy (opaque pointer to the libwayland backend)
    pub const fn as_raw(&self) -> NonNull<wl_proxy> {
        self.raw
    }

    /// Turns [`WlProxy`] into its raw value without calling the destructor
    pub const fn into_raw(self) -> NonNull<wl_proxy> {
        let raw = self.raw;
        mem::forget(self);
        raw
    }

    /// The id for the proxy object
    pub fn id(&self) -> WlObjectId {
        // Safety: calling this on a valid object is safe
        let raw = unsafe { wl_proxy_get_id(self.raw.as_ptr()) };

        // Safety: any valid object in libwayland has nonzero id
        // `WlProxy`'s safety guarantees `self` is a valid object
        unsafe { WlObjectId::try_from(raw).unwrap_unchecked() }
    }

    /// A name of the interface which proxy implements
    pub fn interface_name(&self) -> &str {
        // Safety: calling this on a valid object is safe
        let ptr = unsafe { wl_proxy_get_class(self.raw.as_ptr()) };

        let len = self.interface_name_length.load(Acquire);

        let string_bytes = if len == 0 {
            // Safety: interface name obtained from libwayland is a valid c-string
            let c_str = unsafe { CStr::from_ptr(ptr) };

            self.interface_name_length
                .store(c_str.count_bytes(), Release);

            c_str.to_bytes()
        } else {
            // Safety: there exactly `len` bytes in the string (excluding nul-terminator)
            unsafe { slice::from_raw_parts(ptr.cast::<u8>(), len) }
        };

        // Safety: interface name obtained from libwayland contains
        // only valid ASCII characters
        unsafe { std::str::from_utf8_unchecked(string_bytes) }
    }

    /// Reads a user data pointer from [`wl_proxy`]
    pub fn get_user_data(&self) -> *mut c_void {
        // Safety: calling this on a valid object is safe
        unsafe { wl_proxy_get_user_data(self.as_raw().as_ptr()) }
    }

    /// Sets user data pointer for this [`wl_proxy`]
    ///
    /// # Safety
    ///
    /// The caller should uphold all the invariants for the previous value
    /// written to this pointer before.
    pub unsafe fn set_user_data(&mut self, data: *mut c_void) {
        // Safety: calling this on a valid object is safe
        unsafe { wl_proxy_set_user_data(self.as_raw().as_ptr(), data) };
    }
}

impl Drop for WlProxy {
    fn drop(&mut self) {
        unsafe { wl_proxy_destroy(self.raw.as_ptr()) }
    }
}

impl PartialEq for WlProxy {
    fn eq(&self, other: &Self) -> bool {
        self.raw == other.raw
    }
}

impl Eq for WlProxy {}

impl fmt::Debug for WlProxy {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct(std::any::type_name::<Self>())
            .finish_non_exhaustive()
    }
}

// TODO(hack3rmann): missing docs
#[derive(Clone, Copy, PartialEq)]
pub struct WlProxyQuery {
    // TODO(hack3rmann): determine a nice API for object querying
    raw: *const wl_proxy,
}

impl WlProxyQuery {
    /// Constructs [`WlProxyQuery`] from raw proxy pointer
    ///
    /// # Safety
    ///
    /// - `raw` should be a valid object or null
    pub const unsafe fn from_raw(raw: *const wl_proxy) -> Self {
        Self { raw }
    }

    /// Raw representation of the query
    pub const fn to_raw(self) -> *const wl_proxy {
        self.raw
    }
}

impl fmt::Debug for WlProxyQuery {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.debug_struct(std::any::type_name::<Self>())
            .finish_non_exhaustive()
    }
}
